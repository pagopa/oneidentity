...@classes
vars: {
  d2-config: @config.config
}
direction: right

title: {
  class: title
  label: Authentication  flow
}

user: {
  class: user
} 

IDP: {
  class: idpSPID
}

productClient: {
  class: externalCloudService
}

aws: { 
  class: aws
  ApiGW: {
    class: apigw
  }
  
  vpc: {
    class: vpc
    oneid-ecs-core: {
      class: ECS
    }
  }

  dynamoDB :{
   class: dynamo
  }

  parameterStore {
    class: parameterStore
  }

  KMS: {
    class: KMS
  }

}

user -> productClient: 1. Login

productClient -> user: 2. redirect to OneIdentity

user <-> aws.ApiGW <-> aws.vpc.oneid-ecs-core: 3. /login

user -> aws.ApiGW -> aws.vpc.oneid-ecs-core: 4: /authorize
aws.vpc.oneid-ecs-core -> aws.parameterStore: 4.1: retrive key pem file from parameter store
user <- aws.ApiGW <- aws.vpc.oneid-ecs-core: 4.2: redirect POST

aws.vpc.oneid-ecs-core -> aws.dynamoDB: 5: init SAMLSession record


user <-> IDP: 6: perform authentication

user -> aws.ApiGW -> aws.vpc.oneid-ecs-core: 7: send and perform verification on SAML response
aws.vpc.oneid-ecs-core -> aws.dynamoDB: 7.1: retrieve certificate data
aws.vpc.oneid-ecs-core -> aws.dynamoDB: 7.2: update SAMLSession and initialize OIDCSession records

productClient <- aws.vpc.oneid-ecs-core: 8: init authorization code flow
productClient -> aws.vpc.oneid-ecs-core: 8.1: send /token POST to init access token session
  
aws.vpc.oneid-ecs-core <-> aws.dynamoDB: 9. init access session and validate state

aws.vpc.oneid-ecs-core <-> aws.KMS: 10. Sign JWT

aws.vpc.oneid-ecs-core -> productClient: 10. return JWT

