name: Deploy Oneid Core

on:
  push:
    branches:
      - "main"
    paths:
      - "**/src/oneid/oneid-ecs-core/**"
      - "**/src/oneid/oneid-common/**"
      - ".github/workflows/deploy-oneid-core-yml"
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment'
        type: choice
        required: true
        default: dev
        options:
        - dev
        - uat
        - prod
jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
        matrix: ${{ steps.setmatrix.outputs.matrix }}

    steps:     
      - name: Set Dynamic Env Matrix
        id: setmatrix
        run: |
          echo "github.ref ${{ github.ref }}"
          echo "event name ${{ github.event_name }}"
          

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
              matrixStringifiedObject="{\"include\":[{\"environment\":\"prod\", \"region\":\"eu-south-1\"}]}"
            else
              matrixStringifiedObject="{\"include\":[{\"environment\":\"${{ github.event.inputs.environment }}\", \"region\":\"eu-south-1\"}]}"
            fi
          else
            matrixStringifiedObject="{\"include\":[{\"environment\":\"dev\", \"region\":\"eu-south-1\"}]}"
          fi

          echo "matrix=$matrixStringifiedObject" >> $GITHUB_OUTPUT
          
  deploy:
    name: Deploy on ECS ${{ matrix.environment }}-${{ matrix.region }}
    if: ${{ needs.setup.outputs.matrix != '' }}
    needs: setup
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    strategy:
        matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
         
    continue-on-error: false
    environment: ${{ matrix.environment == 'prod' && format('{0}/{1}', matrix.environment, matrix.region) || matrix.environment }}
    env:
      AWS_REGION: ${{ matrix.region }}
      ENV_SHORT:  ${{ fromJSON('{"dev":"d","uat":"u","prod":"p"}')[matrix.environment] }}
      REGION_SHORT: ${{ fromJSON('{"eu-south-1":"es-1","eu-central-1":"ec-1"}')[matrix.region] }}

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ vars.IAM_ROLE_DEPLOY_ECS }}
          aws-region: ${{ matrix.region }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: src/oneid
        run: |
          docker build -f ./oneid-ecs-core/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg ENVIRONMENT=${{ matrix.environment }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition oneid-${{ env.REGION_SHORT }}-${{ env.ENV_SHORT }}-core  \
          --query taskDefinition > ./task-definition.json
          echo $(cat ./task-definition.json | jq 'del(
                  .taskDefinitionArn,
                  .requiresAttributes,
                  .compatibilities,
                  .revision,
                  .status,
                  .registeredAt,
                  .registeredBy
              )') > ./task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: ./task-definition.json
          container-name: oneid-core
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
         task-definition: ${{ steps.task-def.outputs.task-definition }}
         service: oneid-${{ env.REGION_SHORT }}-${{ env.ENV_SHORT }}-core
         cluster: oneid-${{ env.REGION_SHORT }}-${{ env.ENV_SHORT }}-ecs
         wait-for-service-stability: true

  # release:
  #   name: "Create Release"
  #   if: ${{ needs.build.outputs.matrix != '' }}
  #   needs: [build, deploy]
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix: ${{ fromJson(needs.build.outputs.matrix) }}
  #   environment: ${{ matrix.environment }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Release
  #       if: ${{ matrix.environment == 'prod' }}
  #       id: release
  #       # from https://github.com/cycjimmy/semantic-release-action/commits/main
  #       uses: cycjimmy/semantic-release-action@v4.1.0
  #       with:
  #         semantic_version: 18.0.0
  #         extra_plugins: |
  #           @semantic-release/release-notes-generator@10.0.3
  #           @semantic-release/git@10.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
