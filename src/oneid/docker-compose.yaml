services:
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /tmp"
    image: "amazon/dynamodb-local:latest@sha256:d7ebddeb60fa418bcda218a6c6a402a58441b2a20d54c9cb1d85fd5194341753"
    container_name: dynamodb-local
    user: root
    ports:
      - "8000:8000"
    working_dir: /home/dynamodblocal
  aws-local-ssm:
    image: "localstack/localstack"
    ports:
      - "4566:4566"
    container_name: aws-local-ssm
    environment:
      - SERVICES=ssm
      - DEBUG=1
      - EDGE_PORT=4566
      - START_WEB=0
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
  dynamo-import:
    depends_on:
      - dynamodb-local
      - aws-local-ssm
    links:
      - dynamodb-local
      - aws-local-ssm
    image: amazon/aws-cli
    volumes:
      - ${PWD}/docker_mock/gsi_pointer.json:/home/aws/gsi_pointer.json
      - ${PWD}/docker_mock/gsi_code.json:/home/aws/gsi_code.json
      - ${PWD}/docker_mock/batchDynamo.json:/home/aws/batchDynamo.json
      - ${PWD}/docker_mock/ssm/certs/cert.pem:/home/aws/cert.pem
      - ${PWD}/docker_mock/ssm/certs/key.pem:/home/aws/key.pem
    container_name: dynamo-import
    entrypoint: ["/bin/sh", "-c"]
    environment:
      AWS_ACCESS_KEY_ID: "DUMMYIDEXAMPLE"
      AWS_SECRET_ACCESS_KEY: "DUMMYEXAMPLEKEY"
    command:
      - |
        sleep 3
        aws dynamodb create-table --table-name ClientRegistrations --attribute-definitions AttributeName=clientId,AttributeType=S --key-schema AttributeName=clientId,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --endpoint-url http://dynamodb-local:8000 --region eu-south-1
        aws dynamodb create-table --table-name Sessions --attribute-definitions AttributeName=samlRequestID,AttributeType=S AttributeName=recordType,AttributeType=S AttributeName=code,AttributeType=S --key-schema AttributeName=samlRequestID,KeyType=HASH AttributeName=recordType,KeyType=RANGE --global-secondary-indexes file:///home/aws/gsi_code.json --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --endpoint-url http://dynamodb-local:8000 --region eu-south-1
        aws dynamodb create-table --table-name IDPMetadata --attribute-definitions AttributeName=entityID,AttributeType=S AttributeName=pointer,AttributeType=S --key-schema AttributeName=entityID,KeyType=HASH AttributeName=pointer,KeyType=RANGE --global-secondary-indexes file:///home/aws/gsi_pointer.json --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --endpoint-url http://dynamodb-local:8000 --region eu-south-1
        aws dynamodb batch-write-item --request-items file:///home/aws/batchDynamo.json --endpoint-url http://dynamodb-local:8000 --region eu-south-1
        aws dynamodb list-tables --endpoint-url http://dynamodb-local:8000 --region eu-south-1
        aws ssm put-parameter --region eu-south-1 --endpoint http://aws-local-ssm:4566 --name cert.pem --type String --value file:///home/aws/cert.pem --overwrite
        aws ssm put-parameter --region eu-south-1 --endpoint http://aws-local-ssm:4566 --name "key.pem" --type "SecureString" --value file:///home/aws/key.pem --overwrite
  local-kms:
    image: nsmithuk/local-kms
    ports:
      - "8085:8080"
    volumes:
      - ${PWD}/docker_mock/kms_seeding_file.yaml:/init/seed.yaml
  oneid-ecs-core:
    build:
      context: ./
      dockerfile: oneid-ecs-core/Dockerfile
      args:
        ENVIRONMENT: local
        # enable Quinoa to serve frontend within oneid-ecs-core (only for local dev)
        QUARKUS_QUINOA: true
    container_name: oneid-ecs-core
    ports:
      - "8080:8080"
    depends_on:
      - dynamo-import
      - local-kms
      - aws-local-ssm
    links:
      - dynamodb-local
      - local-kms
      - aws-local-ssm
    environment:
      AWS_ACCESS_KEY_ID: "DUMMYIDEXAMPLE"
      AWS_SECRET_ACCESS_KEY: "DUMMYEXAMPLEKEY"
      QUARKUS_PROFILE: dev
      REGION: "eu-south-1"
      AWS_REGION: "eu-south-1"
      QUARKUS_SSM_ENDPOINT_OVERRIDE: "http://aws-local-ssm:4566"
      QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE: "http://dynamodb-local:8000"
      QUARKUS_KMS_ENDPOINT_OVERRIDE: "http://local-kms:8080"
      KMS_KEY_ID: "ff275b92-0def-4dfc-b0f6-87c96b26c6c7"
  oneid-lambda-service-metadata:
    build:
      context: ./
      dockerfile: oneid-lambda-service-metadata/Dockerfile
    container_name: oneid-lambda-service-metadata
    volumes:
      - mvncache:/jboss/.m2
    ports:
      - "8082:8080"
    depends_on:
      - dynamo-import
      - aws-local-ssm
    links:
      - dynamodb-local
      - aws-local-ssm
    environment:
      AWS_ACCESS_KEY_ID: "DUMMYIDEXAMPLE"
      AWS_SECRET_ACCESS_KEY: "DUMMYEXAMPLEKEY"
      REGION: "eu-south-1"
      AWS_REGION: "eu-south-1"
      QUARKUS_PROFILE: dev
      QUARKUS_SSM_DEVSERVICES_ENABLED: "false"
      QUARKUS_SSM_ENDPOINT_OVERRIDE: "http://aws-local-ssm:4566"
      QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE: "http://dynamodb-local:8000"
  oneid-lambda-client-registration:
    build:
      context: ./
      dockerfile: oneid-lambda-client-registration/Dockerfile
    container_name: oneid-lambda-client-registration
    volumes:
      - mvncache:/jboss/.m2
    ports:
      - "8081:8080"
    depends_on:
      - "dynamo-import"
    links:
      - "dynamodb-local"
    environment:
      AWS_ACCESS_KEY_ID: "DUMMYIDEXAMPLE"
      AWS_SECRET_ACCESS_KEY: "DUMMYEXAMPLEKEY"
      REGION: "eu-south-1"
      QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE: "http://dynamodb-local:8000"
      QUARKUS_PROFILE: dev
  spid-saml-check:
    image: "italia/spid-saml-check:1.10.6@sha256:3c659836344b743f8e1f66d01b0fd336a8893386959a87173fc92d9966a9a289"
    ports:
      - "8443:8443"
  dummy-client:
    build:
      context: ./
      dockerfile: docker_mock/dummy_client/Dockerfile
    env_file: docker_mock/.env
    container_name: dummy-client
    links:
      - oneid-ecs-core
    ports:
      - "8084:8084"
volumes:
  mvncache:
